package classes;

import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;

import backend.*;

public class Attendance {
	private String table = "ATTENDANCE";
	private int id;

	public int studentId;
	private int subjectId;
	
	public Timestamp date;
	public boolean present;
	
	
	public ArrayList<Subject> subjects;
	
	public Attendance(int id, int studentId, int subjectId, Timestamp date, boolean present) {
		this.id = id;
		this.studentId = studentId;
		this.subjectId = subjectId;
		this.date = date;
		this.present = present;
	}
	
	public static boolean createTable(Database db) {
		String[] conditions = {
				"ID			INT		PRIMARY KEY		GENERATED BY DEFAULT AS IDENTITY",
			"STUDENTID		INT						NOT NULL",
			"SUBJECTID		INT						NOT NULL",
			"ATT_DATE		TIMESTAMP				NOT NULL",
			"PRESENT		BOOLEAN					NOT NULL"
		};
		db.createTable("ATTENDANCE", conditions);
		return true;
	}
	public static boolean dropTable(Database db) {
		db.dropTable("ATTENDANCE");
		return true;
	}
	
	public static void insert(Database db, int studentId, int subjectId, int year, int month, int date, int hour, boolean present) {
		String schema = "STUDENTID, SUBJECTID, ATT_DATE, PRESENT";
		String values = String.format("%d, %d, '%04d-%02d-%02d %02d:00:00', %b", studentId, subjectId, year, month, date, hour, present);
		
		try {
			db.insertRow("ATTENDANCE", schema, values);
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while inserting ATTENDANCE " + studentId);
			e.printStackTrace();
		}
	}
	public void update(Database db) {
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(this.date.getTime());
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH);
		int date = cal.get(Calendar.DATE);
		int hour = cal.get(Calendar.HOUR);
		
		String conditions[] = {
               	String.format("STUDENTID=%d", this.studentId),
               	String.format("SUBJECTID='%s'", this.subjectId),
               	String.format("ATT_DATE='%04d-%02d-%02d %02d:00:00'", year, month, date, hour),
               	String.format("PRESENT=%b", this.present),
		};
		
		String id = String.format("ID=%d", this.id);
		
		try {
			db.updateRow(this.table, conditions, id);
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while updating ATTENDANCE " + this.id);
			e.printStackTrace();
		}
	}
	
	public static Attendance getById(Database db, int id) {		
		String[] conditions = {
				String.format("ID = %d", id),
		};
		
		try {			
			ResultSet rs = db.getRows("ATTENDANCE", conditions);
			while (rs.next()) {
				int studentId = rs.getInt("STUDENTID");
				int subjectId = rs.getInt("SUBJECTID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				return new Attendance(id, studentId, subjectId, date, present); 
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE by id");
			e.printStackTrace();
		}
		
		return null;
	}
		
	public int getId() {
		return this.id;
	}
	
	public void getInfo() {
		System.out.println("ATTENDANCE " + this.id);
		System.out.println("  Student ID: " + this.studentId);
 		System.out.println("  Subject ID: " + this.subjectId);
 		System.out.println("  Date: " + this.date.toString());
	}
 	
 	public static void printAttendance(Database db) {
		try {
			ResultSet rs = db.getRows("ATTENDANCE");
			System.out.println("-----------------------------------------------------------------------------");
			System.out.println("ID \tSTUDENTID \tSUBJECTID \tDEPT \t\tPRESENT");
			System.out.println("-----------------------------------------------------------------------------");
			while (rs.next()) {
				int id = rs.getInt("ID");
				int studentId = rs.getInt("STUDENTID");
				int subjectId = rs.getInt("SUBJECTID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				System.out.println(String.format("%d \t%d \t\t%d \t\t%s \t%b", id, studentId, subjectId, date.toString(), present));
			}
			System.out.println("-----------------------------------------------------------------------------");
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while printing ATTENDANCE");
			e.printStackTrace();
		}
	}
 	
 	public static ArrayList<Attendance> getStudentAttendance(Database db, int studentId) {
 		ArrayList<Attendance> attendance = new ArrayList<Attendance>();
		
		String sort[] = {
				"ATT_DATE"
		};
		String sortDir = "DESC";
		String condition[] = {"STUDENTID = '" + studentId + "'"};
		
		try {
			
	 		ResultSet rs = db.getRows("ATTENDANCE", condition, sort, sortDir);
			while (rs.next()) {
				int id = rs.getInt("ID");
				int subjectId = rs.getInt("SUBJECTID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				attendance.add(new Attendance(id, studentId, subjectId, date, present));
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE list");
			e.printStackTrace();
		}
		return attendance;
 	}
 	public static int[] getStudentAttendanceResult(Database db, int studentId) {
 		int result[] = {0, 0};
		
		String sort[] = {
				"ATT_DATE"
		};
		String sortDir = "DESC";
		String condition[] = {"STUDENTID = '" + studentId + "'"};
		
		try {
			
	 		ResultSet rs = db.getRows("ATTENDANCE", condition, sort, sortDir);
			while (rs.next()) {
				boolean present = rs.getBoolean("PRESENT");
				
				result[1]++;
				if (present)	result[0]++;
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE result");
			e.printStackTrace();
		}
		return result;
 	}
 	
 	public static ArrayList<Attendance> getStudentAttendanceForSubject(Database db, int studentId, int subjectId) {
 		ArrayList<Attendance> attendance = new ArrayList<Attendance>();
		
		String sort[] = {
				"ATT_DATE"
		};
		String sortDir = "DESC";
		String condition[] = {"STUDENTID = " + studentId, "SUBJECTID = " + subjectId};
		
		try {
			
	 		ResultSet rs = db.getRows("ATTENDANCE", condition, sort, sortDir);
			while (rs.next()) {
				int id = rs.getInt("ID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				attendance.add(new Attendance(id, studentId, subjectId, date, present));
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE result");
			e.printStackTrace();
		}
		return attendance;
 	}
 	
 	public static ArrayList<Attendance> getLectureAttendance(Database db, int subjectId, Calendar cal, int hour) {
 		ArrayList<Attendance> attendance = new ArrayList<Attendance>();
		
		String sort[] = {
				"ATT_DATE"
		};
		String sortDir = "DESC";
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH);
		int day = cal.get(Calendar.DATE);
		String condition[] = {"SUBJECTID = " + subjectId, "ATT_DATE = " + String.format("'%04d-%02d-%02d %02d:00:00'", year, month, day, hour)};
		
		try {
			
	 		ResultSet rs = db.getRows("ATTENDANCE", condition, sort, sortDir);
			while (rs.next()) {
				int id = rs.getInt("ID");
				int studentId = rs.getInt("STUDENTID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				attendance.add(new Attendance(id, studentId, subjectId, date, present));
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE result");
			e.printStackTrace();
		}
		return attendance;
 	}
 	public static Attendance getLectureAttendanceForStudent(Database db, int studentId, int subjectId, Calendar cal, int hour) {		
		String sort[] = {
				"ATT_DATE"
		};
		String sortDir = "DESC";
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH);
		int day = cal.get(Calendar.DATE);
		String condition[] = {"STUDENTID = " + studentId, "SUBJECTID = " + subjectId, "ATT_DATE = " + String.format("'%04d-%02d-%02d %02d:00:00'", year, month, day, hour)};
		
		try {
			
	 		ResultSet rs = db.getRows("ATTENDANCE", condition, sort, sortDir);
			while (rs.next()) {
				int id = rs.getInt("ID");
				Timestamp date = rs.getTimestamp("ATT_DATE");
				boolean present = rs.getBoolean("PRESENT");
				
				return new Attendance(id, studentId, subjectId, date, present);
			}
		} catch (Exception e) {
			System.out.println("ATTENDANCE Error while getting ATTENDANCE result");
			e.printStackTrace();
		}
		return null;
 	}
 	
}