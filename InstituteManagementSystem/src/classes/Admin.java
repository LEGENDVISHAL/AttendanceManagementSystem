package classes;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;

import backend.*;

public class Admin extends User {
	private String table = "ADMINS";
	private int id;
	private int userId;
	
	public String name, phone, address;
	
	public Admin(int id, int userId, String email, String name, String pass, String phone, String address) {
		super(userId, email, pass, "ADMIN");
		this.id = id;
		this.name = name;
		this.userId = userId;
		this.phone = phone;
		this.address = address;
	}
		

	public static boolean createTable(Database db) {
		String[] conditions = {
				"ID			INT		PRIMARY KEY		GENERATED BY DEFAULT AS IDENTITY",
				"USERID		INT						NOT NULL",
				"NAME 		TEXT					NOT NULL",
				"PHONE		TEXT					NULL",
				"ADDR		TEXT					NULL",
		};
		db.createTable("ADMINS", conditions);
		return true;
	}
		public static boolean dropTable(Database db) {
			db.dropTable("ADMINS");
			return true;
		}
		
		public static void insert(Database db, int userId, String name, String phone, String address) {
			String schema = "USERID, NAME, PHONE, ADDR";
			String values = String.format("%d, '%s', '%s', '%s'", userId, name, phone, address);
			
			try {
				db.insertRow("ADMINS", schema, values);
			} catch (Exception e) {
				System.out.println("ADMIN Error while inserting ADMIN " + userId);
				e.printStackTrace();
			}
		}
		public void update(Database db) {
			super.update(db);
			String conditions[] = {
	               	String.format("USERID=%d", this.userId),
	               	String.format("NAME='%s'", this.name),
	               	String.format("PHONE='%s'", this.phone),
	               	String.format("ADDR='%s'", this.address),
			};
			
			String id = String.format("ID=%d", this.id);
			
			try {
				db.updateRow(this.table, conditions, id);
			} catch (Exception e) {
				System.out.println("ADMIN Error while updating ADMIN " + this.id);
				e.printStackTrace();
			}
		}
		
		public static Admin login(Database db, int userId) {
			User u = User.getById(db, userId);
			if (u == null) {
				System.out.println("No user with user id " + userId);
				return null;
			}
			
			String[] conditions = {
					String.format("USERID = %d", userId),
			};
			
			try {			
				ResultSet rs = db.getRows("ADMINS", conditions);
				if (rs != null) {
					while (rs.next()) {
						int id = rs.getInt("ID");
						String name = rs.getString("NAME");
						String phone = rs.getString("PHONE");
						String address = rs.getString("ADDR");
						
						
						return new Admin(id, userId, u.email, name, u.password, phone, address); 
					}
				}
				
			} catch (Exception e) {
				System.out.println("ADMIN Error while logging in ADMIN");
				e.printStackTrace();
			}
			
			return null;
		}
		
	 	public void printAcademicInfo() {
	 		System.out.println("Academic Details");
	 		System.out.println("  Teacher Id: " + this.id);
	 		System.out.println("  Teacher Name: " + this.name);
	 		System.out.println("  Phone: " + this.phone);
	 		System.out.println("  Address.: " + this.address);
	 	}
	 	
	 	public void getInfo() {
			System.out.println("TEACHER " + this.id);
			System.out.println("  USER ID: " + this.userId);
			System.out.println("  NAME: " + this.name);
		}
	
	public static void printAdmins(Database db) {
		ArrayList<HashMap<String, Object>> temp = new ArrayList<HashMap<String, Object>>();
		
		try {
			ResultSet rs = db.getRows("TEACHERS");
			System.out.println("---------------------------------------------------------------------------");
			System.out.println("ID \tUSERID \tNAME \t\tPHONE \t\t\tADDRESS");
			System.out.println("---------------------------------------------------------------------------");
			while (!rs.isClosed() && rs.next()) {
				int id = rs.getInt("ID");
				int userId = rs.getInt("USERID");
				String name = rs.getString("NAME");
				String phone = rs.getString("PHONE");
				String address = rs.getString("ADDR");
				
				HashMap<String, Object> teacher = new HashMap<String, Object>();
				teacher.put("ID", id);
				teacher.put("USERID", userId);
				teacher.put("NAME", name);
				teacher.put("PHONE", phone);
				teacher.put("ADDR", address);
				
				temp.add(teacher);
			}
			
			for (HashMap<String, Object> hashmap : temp) {
 				int id = (int) hashmap.get("ID");
				int userId = (int) hashmap.get("USERID");
				String name = (String) hashmap.get("NAME");
				String phone = (String) hashmap.get("PHONE");
				String address = (String) hashmap.get("ADDR");
				
				System.out.println(String.format("%d \t%d \t%s \t%s \t%s", id, userId, name, phone, address));
				
 			}
			System.out.println("---------------------------------------------------------------------------");
		} catch (Exception e) {
			System.out.println("ADMIN Error while printing ADMIN");
			e.printStackTrace();
		}
	}
}
