package classes;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import backend.*;
import frontend.Main;

public class Student extends User {
	private String table = "STUDENTS";
	private int id;
	private int userId;
	public int year;
	public String department;
	public int divisionId;
	public String name, phone, address;
	public int grNo; 
	
	public Division division;
	public ArrayList<Subject> subjects;
	
	// protected subjects;
	
	public Student(int id, int userId, int divisionId, String email, String name, String pass, int year, String dept, int grNo, String phone, String address) {
		super(userId, email, pass, "STUDENT");
		this.name = name;
		this.year = year;
		this.id = id;
		this.userId = userId;
		this.department = dept;
		this.divisionId = divisionId;
		this.division = Division.getById(Main.db, divisionId);
		this.subjects = Subject.getDivisionSubjects(Main.db, divisionId);
		this.grNo = grNo;
		this.phone = phone;
		this.address = address;
	}
	

	public static boolean createTable(Database db) {
		String[] conditions = {
				"ID			INT		PRIMARY KEY		GENERATED BY DEFAULT AS IDENTITY",
				"USERID		INT						NOT NULL",
				"DIVID		INT						NOT NULL",
				"NAME		TEXT					NOT NULL",
				"YEAR		INT						NOT NULL",
				"DEPT		TEXT					NOT NULL",
				"GRNO		INT						NOT NULL",
				"PHONE		TEXT					NULL",
				"ADDR		TEXT					NULL",
		};
		db.createTable("STUDENTS", conditions);
		return true;
	}
	public static boolean dropTable(Database db) {
		db.dropTable("STUDENTS");
		return true;
	}
	
	public static void insert(Database db, int userId, int divisionId, String name, int year, String dept, int grNo, String phone, String address) {
		String schema = "USERID, DIVID, NAME, YEAR, DEPT, GRNO, PHONE, ADDR";
		String values = String.format("%d, %d, '%s', %d, '%s', %d, '%s', '%s'", userId, divisionId, name, year, dept, grNo, phone, address);
		
		try {
			db.insertRow("STUDENTS", schema, values);
		} catch (Exception e) {
			System.out.println("STUDENT Error while inserting STUDENT " + userId);
			e.printStackTrace();
		}
	}
	public void update(Database db) {
		super.update(db);
		String conditions[] = {
               	String.format("USERID=%d", this.userId),
               	String.format("DIVID=%d", this.divisionId),
               	String.format("NAME='%s'", this.name),
               	String.format("YEAR=%d", this.year),
               	String.format("DEPT='%s'", this.department),
               	String.format("GRNO=%d", this.grNo),
               	String.format("PHONE='%s'", this.phone),
               	String.format("ADDR='%s'", this.address),
		};
		
		String id = String.format("ID=%d", this.id);
		
		try {
			db.updateRow(this.table, conditions, id);
		} catch (Exception e) {
			System.out.println("STUDENT Error while updating STUDENT " + this.id);
			e.printStackTrace();
		}
	}
	
	public static Student login(Database db, int userId) {
		User u = User.getById(db, userId);
		if (u == null) {
			System.out.println("No user with user id " + userId);
			return null;
		}
		
		String[] conditions = {
				String.format("USERID = %d", userId),
		};
		
		try {			
			ResultSet rs = db.getRows("STUDENTS", conditions);
			while (rs.next()) {
				int id = rs.getInt("ID");
				int divisionId = rs.getInt("DIVID");
				int year = rs.getInt("YEAR");
				String name = rs.getString("NAME");
				String dept = rs.getString("DEPT");
				int grNo = rs.getInt("GRNO");
				String phone = rs.getString("PHONE");
				String address = rs.getString("ADDR");
				
				return new Student(id, userId, divisionId, u.email, name, u.password, year, dept, grNo, phone, address); 
			}
		} catch (Exception e) {
			System.out.println("STUDENT Error while logging in STUDENT");
			e.printStackTrace();
		}
		
		return null;
	}
		
		
	public int getId() {
		return this.id;
	}
	
 	public void printAcademicInfo() {
 		System.out.println("Academic Details");
 		System.out.println("  Name: " + this.name);
 		System.out.println("  Year: " + this.year);
 		System.out.println("  Student Id: " + this.id);
 		System.out.println("  Department: " + this.department);
 		System.out.println("  Division: " + this.division.name);
 		System.out.println("  GR No.: " + this.grNo);
 		System.out.println("  Phone: " + this.phone);
 		System.out.println("  Address.: " + this.address);
 		System.out.println("  Subjects: ");
 		for (Subject s : this.subjects) {
 			System.out.println("    " + s.name);
 		}
 	}
 	
 	public static void printStudents(Database db) {
 		ArrayList<HashMap<String, Object>> temp = new ArrayList<HashMap<String, Object>>();
		try {
			ResultSet rs = db.getRows("STUDENTS");
			
			System.out.println("--------------------------------------------------------------------------------------------------");
			System.out.println("ID \tNAME \t\tYEAR \tDEPT \t\tDIV \tGR No. \t\tPHONE \t\tADDRESS");
			System.out.println("--------------------------------------------------------------------------------------------------");
			while (rs.next()) {
				int id = rs.getInt("ID");
				int year = rs.getInt("YEAR");
				String name = rs.getString("NAME");
				String dept = rs.getString("DEPT");
				int divisionId = rs.getInt("DIVID");
				int grNo = rs.getInt("GRNO");
				String phone = rs.getString("PHONE");
				String address = rs.getString("ADDR");
				
				HashMap<String, Object> student = new HashMap<String, Object>();
				student.put("ID", id);
				student.put("YEAR", year);
				student.put("NAME", name);
				student.put("DEPT", dept);
				student.put("DIVID", divisionId);
				student.put("GRNO", grNo);
				student.put("PHONE", phone);
				student.put("ADDR", address);
			
				temp.add(student);
			}
			
			for (HashMap<String, Object> hashmap : temp) {
 				int id = (int) hashmap.get("ID");
				int year = (int) hashmap.get("YEAR");
				String name = (String) hashmap.get("NAME");
				String dept = (String) hashmap.get("DEPT");
				int divisionId = (int) hashmap.get("DIVID");
				int grNo = (int) hashmap.get("GRNO");
				String phone = (String) hashmap.get("PHONE");
				String address = (String) hashmap.get("ADDR");
				
				Division d = Division.getById(db, divisionId);
				System.out.println(String.format("%d \t%s \t%d \t%s \t%s \t%d \t%s \t%s", id, name, year, dept, d.name, grNo, phone, address));
 			}
			System.out.println("--------------------------------------------------------------------------------------------------");
		} catch (Exception e) {
			System.out.println("STUDENT Error while printing users");
			e.printStackTrace();
		}
	}
 	
 	public static ArrayList<Student> getDivisionStudents(Database db, int divisionId) {
 		ArrayList<HashMap<String, Object>> temp = new ArrayList<HashMap<String, Object>>();
 		
 		String condition[] = {"DIVID = " + divisionId};
 		try {
 			ResultSet rs = db.getRows("STUDENTS", condition);
 			while(!rs.isClosed() && rs.next()) {
 				int id = rs.getInt("ID");
 				int userId = rs.getInt("USERID");
				int year = rs.getInt("YEAR");
				String name = rs.getString("NAME");
				String dept = rs.getString("DEPT");
				int grNo = rs.getInt("GRNO");
				String phone = rs.getString("PHONE");
				String address = rs.getString("ADDR");
				
				HashMap<String, Object> student = new HashMap<String, Object>();
				student.put("ID", id);
				student.put("USERID", userId);
				student.put("YEAR", year);
				student.put("NAME", name);
				student.put("DEPT", dept);
				student.put("DIVID", divisionId);
				student.put("GRNO", grNo);
				student.put("PHONE", phone);
				student.put("ADDR", address);
			
				temp.add(student);
 			}
 			
 			ArrayList<Student> students = new ArrayList<Student>();
 			for (HashMap<String, Object> hashmap : temp) {
 				int id = (int) hashmap.get("ID");
 				int userId = (int) hashmap.get("USERID");
				int year = (int) hashmap.get("YEAR");
				String name = (String) hashmap.get("NAME");
				String dept = (String) hashmap.get("DEPT");
				int grNo = (int) hashmap.get("GRNO");
				String phone = (String) hashmap.get("PHONE");
				String address = (String) hashmap.get("ADDR");
				
 				User user = User.getById(db, userId);
				Student s = new Student(id, userId, divisionId, user.email, name, user.password, year, dept, grNo, phone, address);
				students.add(s);
 			}
 			
 			return students;
 		} catch (Exception e) {
			System.out.println("STUDENT Error while getting division STUDENT");
			e.printStackTrace();
 		}

 		return null;
 	}
}