package classes;

import java.sql.*;
import backend.*;

public class User {
	private String table = "USERS";
	private int id;
	public String email, password;
	public String role;
	
	public User(int id, String email, String pass, String role) {
		this.id = id;
		this.email = email;
		this.password = pass;
		this.role = role;
	}
	
	public static boolean createTable(Database db) {
		String[] conditions = {
				"ID			INT		PRIMARY KEY		GENERATED BY DEFAULT AS IDENTITY",
				"EMAIL		TEXT					NOT NULL",
				"PASSWORD	TEXT					NOT NULL",
				"ROLE		TEXT					NOT NULL",
		};
		db.createTable("USERS", conditions);
		return true;
	}
	
	public static boolean dropTable(Database db) {
		db.dropTable("USERS");
		return true;
	}

	public void getInfo() {
		System.out.println("  ID: " + this.id);
		System.out.println("  Email: " + this.email);
		
		System.out.print("  Password: ");
		for (int idx=0; idx<this.password.length(); idx++) 	System.out.print("*");
		System.out.println();
	}
	
	public static User login(Database db, String email, String password) {
		String[] conditions = {
				String.format("EMAIL = '%s'", email),
				String.format("PASSWORD = '%s'", password),
				};
		
		try {
			ResultSet rs = db.getRows("USERS", conditions);
			if (rs != null) {
				while (rs.next()) {
					String role = rs.getString("ROLE");
					int id = rs.getInt("ID");
					
					return new User(id, email, password, role); 
				}
			}
			
		} catch (Exception e) {
			System.out.println("User Error while getting user info");
			e.printStackTrace();
		}
		
		return null;
	}
	
	public static void insertUser(Database db, String email, String password, String role) {
		String schema = "EMAIL, PASSWORD, ROLE";
		String values = String.format("'%s', '%s', '%s'", email, password, role);
		
		try {
//			System.out.println("HERE");
			db.insertRow("USERS", schema, values);
		} catch (Exception e) {
			System.out.println("User Error while inserting USER " + email);
			e.printStackTrace();
		}
	}
	
	public void update(Database db) {
		String conditions[] = {
               	String.format("EMAIL='%s'", this.email),
               	String.format("PASSWORD='%s'", this.password),
               	String.format("ROLE='%s'", this.role),
		};
		
		String id = String.format("ID=%d", this.id);
		
		try {
			db.updateRow(this.table, conditions, id);
		} catch (Exception e) {
			System.out.println("User Error while updating USER " + this.email);
			e.printStackTrace();
		}
	}
	
	public static User getById(Database db, int id) {		
		String[] conditions = {
				String.format("ID = %d", id)
		};
		
		try {
			ResultSet rs = db.getRows("USERS", conditions);
			if (rs != null) {
				while (rs.next()) {
					String email = rs.getString("EMAIL");
					String password = rs.getString("PASSWORD");
					String role = rs.getString("ROLE");
					
					return new User(id, email, password, role); 
				}
			}
			
		} catch (Exception e) {
			System.out.println("User Error while getting user info");
			e.printStackTrace();
		}
		
		return null;
	}
	
	public int getId() {
		return this.id;
	}

	public static void printUsers(Database db) {
		try {
			ResultSet rs = db.getRows("USERS");
			System.out.println("-------------------------------------------------");
			System.out.println("ID \tEMAIL \t\tPASSWORD \tROLE");
			System.out.println("-------------------------------------------------");
			while (rs.next()) {
				int id = rs.getInt("ID");
				String email = rs.getString("EMAIL");
				String password = rs.getString("PASSWORD");
				String role = rs.getString("ROLE");

				System.out.println(String.format("%d \t%s \t\t%s \t\t%s", id, email, password, role));
			}
			System.out.println("-------------------------------------------------");
		} catch (Exception e) {
			System.out.println("User Error while printing users");
			e.printStackTrace();
		}
	}
}